generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  role          String     @default("user")
  password      String?
  accounts      Account[]
  reminders     Reminder[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id          String    @id @default(cuid())
  title       String
  description String?
  date        String
  type        EventType @default(HOLIDAY)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Holiday {
  id        String   @id @default(cuid())
  name      String
  date      String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reminder {
  id          String         @id @default(cuid())
  title       String
  description String?
  date        DateTime
  time        DateTime?
  email       String
  isEmailSent Boolean        @default(false)
  status      ReminderStatus @default(PENDING)
  userId      String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  isRecurring Boolean        @default(false)
  user        User?          @relation(fields: [userId], references: [id])

  @@index([userId], map: "Reminder_userId_fkey")
}

model SiteSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String   @db.Text
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model FAQ {
  id        String   @id @default(cuid())
  question  String
  answer    String   @db.Text
  order     Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum EventType {
  HOLIDAY
  HISTORY
  CULTURE
}

enum ReminderStatus {
  PENDING
  SENT
  CANCELLED
}
